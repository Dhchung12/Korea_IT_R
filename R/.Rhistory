mat_new>0
# 풀이
mat1_new>0
mat1_new[mat1_new>0]
matrix2 <- matrix(1:30, ncol = 5)
matrix2
matrix[c(T,F),C(F,T)]
matrix[c(T,F),c(F,T)]
matrix[c(1,3,5),c(2,4)]
matrix[3,]
matrix2[c(T, F), c(F, T)]
ar <- array(1:24, dim=c(2, 3, 4))
ar
ar[  , 1 , ]
ar[  , 1 , ] %%2 ==0
cond1<-ar[  , 1 , ] %%2 ==0
ar[cond1]
ar[,1,][cond1]
ar[ cond1, 1,cond1]
# VADeaths 데이터셋을 가져오기
data("VADeaths")
# VADeaths 데이터셋에 대한 설명 확인
help("VADeaths")
# 해당 데이터셋은 vds 변수에 저장
vds <- VADeaths
vds
# tolower(값) : 값을 소문자로 변환하여 반환한다
colnames(vds) <- tolower(colnames(vds))
vds
# vds 변수에 저장된 데이터셋은 1940년대 버지니아주의 연령 및 거주지역별 사망률 입니다
# female : 여성, male : 남성
# urban : 도시, rural : 외곽
class(vds)
mode(vds)
nrow(vds)
ncol(vds)
dimnames(vds)
rownames(vds)
colnames(vds)
# 50.0보다 큰 사망률 찾기
vds >50.0
view(vds)
View(vds)
# 50.0보다 큰 사망률 찾기
cond2 <- vds >50.0
vds[cond2]
# rural male의 사망률이 30.0보다 작은 연령대를 구하기
vds[,1]
# rural male의 사망률이 30.0보다 작은 연령대를 구하기
vds[,1]<30.0
# rural male의 사망률이 30.0보다 작은 연령대를 구하기
vds[vds[,1]<30.0]]
# rural male의 사망률이 30.0보다 작은 연령대를 구하기
vds[vds[1,][vds[,1]<30.0]]
# rural male의 사망률이 30.0보다 작은 연령대를 구하기
names(vds[vds[1,][vds[,1]<30.0]])
# 과제.
math_scores <- c(76.7, 87.3, 94.2, 70.6)
names(math_scores) <- c("학생1", "학생2", "학생3", "학생4")
math_scores
math_scores >= 85
math_scores[math_scores >= 85]
# rural male의 사망률이 30.0보다 작은 연령대를 구하기
[vds[1,][vds[,1]<30.0]]
# rural male의 사망률이 30.0보다 작은 연령대를 구하기
[vds[1,]][vds[,1]<30.0]]
# rural male의 사망률이 30.0보다 작은 연령대를 구하기
[vds[1,]][vds[,1]<30.0]
# rural male의 사망률이 30.0보다 작은 연령대를 구하기
vds[1,]
# rural male의 사망률이 30.0보다 작은 연령대를 구하기
vds[,1]
math_scores
math_scores >= 85
math_scores[math_scores >= 85]
# rural male의 사망률이 30.0보다 작은 연령대를 구하기
vds_1 <- vds[,1]
vds_1[vds_1<30.0]
names(vds_1[vds_1<30.0])
# 60~64세에서 사망률이 30을 넘는 지역과 성별 구하기
vds
# 60~64세에서 사망률이 30을 넘는 지역과 성별 구하기
vds[3,]
# 60~64세에서 사망률이 30을 넘는 지역과 성별 구하기
vds_2 <- vds[3,] # 60~64세 의 사망률 데이터 조회 후 변수 vds_2에 담기
vds_2[vds_2>30.0]
names(vds_2[vds_2>30.0])
vds[local_name]
# 위에서 구한 지역과 성별의 65~69세 사망률 구하기
local_name <- names(vds_2[vds_2>30.0]) # 위에서 구한 지역 변수 local_name에 담기
vds[local_name]
local_name
vds['rural male']
vds['rural male',]
vds[,'rural male']
vds[,local_name]
vds['65-69',local_name]
local_sex_name
local_sex_name
# 위에서 구한 지역과 성별의 65~69세 사망률 구하기
local_sex_name <- names(vds_2[vds_2>30.0]) # 위에서 구한 지역,성별 변수 local_name에 담기
vds['65-69',local_sex_name] #
# 위에서 구한 지역과 성별의 65~69세 사망률 구하기
local_gender_name <- names(vds_2[vds_2>30.0]) # 위에서 구한 지역,성별 변수 local_name에 담기
vds['65-69',local_gender_name] # 해당 지역,성별에 대한 65~69세 사망률 조회
# 지역별 남성과 여성의 사망률 차이를 구해 urban_gender_gap, rural_gender_gap 변수에 저장하기
# 남성 - 여성 또는 여성 - 남성으로 계산하세요(둘 중 하나)
vds
# 지역별 남성과 여성의 사망률 차이를 구해 urban_gender_gap, rural_gender_gap 변수에 저장하기
# 남성 - 여성 또는 여성 - 남성으로 계산하세요(둘 중 하나)
vds[,1]-vds[,2]
# 지역별 남성과 여성의 사망률 차이를 구해 urban_gender_gap, rural_gender_gap 변수에 저장하기
# 남성 - 여성 또는 여성 - 남성으로 계산하세요(둘 중 하나)
abs(vds[,1]-vds[,2])
urban_gender_gap = abs(vds[,3]-vds[,4])
urban_gender_gap
# urban_gender_gap, rural_gender_gap 변수의 벡터를 연결하여 새로운 매트릭스를 만들고 vds2 변수에 저장하기
vds2 <- c(rural_gender_gap,urban_gender_gap)
# 지역별 남성과 여성의 사망률 차이를 구해 urban_gender_gap, rural_gender_gap 변수에 저장하기
# 남성 - 여성 또는 여성 - 남성으로 계산하세요(둘 중 하나)
rural_gender_gap = abs(vds[,1]-vds[,2])
urban_gender_gap = abs(vds[,3]-vds[,4])
# urban_gender_gap, rural_gender_gap 변수의 벡터를 연결하여 새로운 매트릭스를 만들고 vds2 변수에 저장하기
vds2 <- c(rural_gender_gap,urban_gender_gap)
vds2
# urban_gender_gap, rural_gender_gap 변수의 벡터를 연결하여 새로운 매트릭스를 만들고 vds2 변수에 저장하기
vds2 <- cbind(rural_gender_gap,urban_gender_gap)
vds2
# urban_gender_gap, rural_gender_gap 변수의 벡터를 연결하여 새로운 매트릭스를 만들고 vds2 변수에 저장하기
vds2 <- rbind(rural_gender_gap,urban_gender_gap)
vds2
# urban_gender_gap, rural_gender_gap 변수의 벡터를 연결하여 새로운 매트릭스를 만들고 vds2 변수에 저장하기
vds2 <- cbind(rural_gender_gap,urban_gender_gap) # 행단위로 연결해야 하므로 rbind 사용
vds2
ar <- array(1:24, dim=c(2, 3, 4))
ar
cond1<-ar[  , 1 , ] %%2 ==0
ar[,1,][cond1]
vds[vds[, "rural male"] > 30.0, "rural male"]
names((vds["60-64", ] > 30)[vds["60-64", ] > 30])
# 60~64세에서 사망률이 30을 넘는 지역과 성별 구하기
vds_2 <- vds[3,] # 60~64세 의 사망률 데이터 조회 후 변수 vds_2에 담기
names(vds_2[vds_2>30.0]) # 사망률이 30을 넘는 데이터 조회 후 이름 조회
names((vds["60-64", ] > 30)
getwd()
setwd('D:\R분석\R')
setwd('D:\\R분석\R')
setwd('D:\\R분석\\R')
getwd()
x <- 1:100
x2 <- ifelse(x %% 33 ==0,'짝짝',
ifelse(x %% 3 == 0,'짝',x))
x2
# 삼육구 게임
x3 <- ifelse(x %/% 10 %%3 == 0 & x %/% 10 != 0,ifelse(x %%3==0 & x %% 10 != 0,'짝짝','짝'),
ifelse(x %%10%%3 ==0 & x%%10 != 0,'짝',x ))
x3
# 패키지 설치
install.packages("ggplot2")
# 패키지 사용준비
library(ggplot2)
# 설명서
help(ggplot2)
library(help = ggplot2)
# ==================================================
# geom_path
a + geom_path(lineend = "butt")
economics
data()
mpg
View(mpg)
{
a <- ggplot(economics, aes(date, unemploy))
c <- ggplot(mpg, aes(hwy))
c2 <- ggplot(mpg)
d <- ggplot(mpg, aes(fl))
e <- ggplot(mpg, aes(cty, hwy))
f <- ggplot(mpg, aes(class, hwy))
g <- ggplot(diamonds, aes(cut, color))
i <- ggplot(economics, aes(date, unemploy))
}
View(economics)
View(diamonds)
# ==================================================
# geom_path
# economics의 date를 x축, unemploy를 y축으로 설정한다.
a + geom_path(lineend = "butt")
# ==================================================
# geom_path
# 데이터로 economics를 사용하고, economics의 date를 x축, unemploy를 y축으로 설정한다.
# path -> 경로를 그린다
# lineend = 'butt' : 선의 끝이 뭉툭하게 잘리게 처리(기본값)
# lineend = 'round' : 선의 끝이 둥글게 처리
# lineend = 'square' : 선의 끝이 직각으로 처리
a + geom_path(lineend = "round")
# ==================================================
# geom_path
# 데이터로 economics를 사용하고, economics의 date를 x축, unemploy를 y축으로 설정한다.
# path -> 경로를 그린다
# lineend = 'butt' : 선의 끝이 뭉툭하게 잘리게 처리(기본값)
# lineend = 'round' : 선의 끝이 둥글게 처리
# lineend = 'square' : 선의 끝이 직각으로 처리
a + geom_path(lineend = "butt")
# ==================================================
# geom_path
# 데이터로 economics를 사용하고, economics의 date를 x축, unemploy를 y축으로 설정한다.
# path -> 경로를 그린다
# lineend = 'butt' : 선의 끝이 뭉툭하게 잘리게 처리(기본값)
# lineend = 'round' : 선의 끝이 둥글게 처리
# lineend = 'square' : 선의 끝이 직각으로 처리
a + geom_path(lineend = "square")
# ==================================================
# geom_path
# 데이터로 economics를 사용하고, economics의 date를 x축, unemploy를 y축으로 설정한다.
# path -> 경로를 그린다
# lineend = 'butt' : 선의 끝이 뭉툭하게 잘리게 처리(기본값)
# lineend = 'round' : 선의 끝이 둥글게 처리
# lineend = 'square' : 선의 끝이 직각으로 처리
a + geom_path(lineend = "butt")
# ==================================================
# geom_path
# 데이터로 economics를 사용하고, economics의 date를 x축, unemploy를 y축으로 설정한다.
# path -> 경로를 그린다
# lineend = 'butt' : 선의 끝이 뭉툭하게 잘리게 처리(기본값)
# lineend = 'round' : 선의 끝이 둥글게 처리
# lineend = 'square' : 선의 끝이 직각으로 처리
a + geom_path(lineend = "round")
# ==================================================
# geom_path
# 데이터로 economics를 사용하고, economics의 date를 x축, unemploy를 y축으로 설정한다.
# path -> 경로를 그린다
# lineend = 'butt' : 선의 끝이 뭉툭하게 잘리게 처리(기본값)
# lineend = 'round' : 선의 끝이 둥글게 처리
# lineend = 'square' : 선의 끝이 직각으로 처리
a + geom_path(lineend = "round") + labs(title = 'Unemploy of Date')
# ==================================================
# geom_area
c + geom_area(stat = "bin")
# ==================================================
# geom_area
# 데이터로 mpg를 사용하고, mpg의 hwy를 x축, count를 y축으로 설정한다.
# area ->  x축과 데이터 선 사이의 영역을 채움
c + geom_area(stat = "bin",, fill = "skyblue")
# ==================================================
# geom_area
# 데이터로 mpg를 사용하고, mpg의 hwy를 x축, count를 y축으로 설정한다.
# area ->  x축과 데이터 선 사이의 영역을 채움
c + geom_area(stat = "bin",, fill = "skyblue",color = 'black')
# geom_dotplot
c + geom_dotplot()
# geom_dotplot
c + geom_dotplot(stat = "bin")
# geom_dotplot
c + geom_dotplot()
# geom_dotplot
c + geom_dotplot(fill = "skyblue",color = 'black')
# geom_histogram
c + geom_histogram()
# geom_freqploy
c + geom_freqpoly()
# geom_histogram ->
c + geom_histogram()
# geom_qq
c2 + geom_qq(aes(sample = hwy))
# geom_qq
c2 + geom_qq(aes(sample = hwy))
# geom_qq
c2 + geom_qq(aes(,sample = hwy))
# geom_qq
c2 + geom_qq(aes(sample = hwy))
# geom_qq
c2 + geom_qq(aes(,sample = hwy))
# geom_qq
c2 + geom_qq(aes(sample = hwy))
# geom_qq
c2 + geom_qq_line(aes(sample = hwy))
# geom_qq
c2 + geom_qq(aes(sample = hwy))
# geom_qq
# mpg 데이터셋의 hwy가 정규분포를 따르는지 시각적으로 평가
c2 + geom_qq(aes(sample = hwy)) +geom_qq_line()
# geom_qq
# mpg 데이터셋의 hwy가 정규분포를 따르는지 시각적으로 평가
c2 + geom_qq(aes(sample = hwy)) +geom_qq_line(aes(sample = hwy))
# geom_qq
# mpg 데이터셋의 hwy가 정규분포를 따르는지 시각적으로 평가
c2 + geom_qq(aes(sample = hwy),color = 'red') +geom_qq_line(aes(sample = hwy))
# ==================================================
# geom_bar
d + geom_bar()
# ==================================================
# geom_point
e + geom_point()
# geom_quantile
e + geom_quantile()
# ==================================================
# geom_point
# mpg 데이터셋의 cty에 대한 hwy값을 점으로 나타낸다
e + geom_point()
# geom_quantile
e + geom_quantile()
# geom_quantile
e + geom_quantile()
library(quantreg)
# geom_quantile
e + geom_quantile()
# geom_smooth
e + geom_smooth()
# geom_smooth
e + geom_smooth(method = 'lm')
# geom_smooth
e + geom_smooth(method = 'glm')
# geom_smooth
e + geom_smooth(method = 'gam')
# geom_smooth
e + geom_smooth(method = 'loess')
# ==================================================
# geom_col
f + geom_col()
# geom_boxplot
f + geom_boxplot()
# geom_boxplot
# 데이터의 분포를 요약하며, 중앙값,사분위수,범위 및 이상치(아웃라이어)를 시각적으로 표현
f + geom_boxplot(outlier.colour = "red", outlier.shape = 16, outlier.size = 3)
# geom_dotplot
f + geom_dotplot(binaxis = "y", stackdir = "center")
# geom_dotplot
# y축을 기준으로 점을 쌓고, 점들이 중심을 기준으로 양쪽으로 쌓인다
f + geom_dotplot(binaxis = "y", stackdir = "center",colour = 'red')
# geom_dotplot
# y축을 기준으로 점을 쌓고, 점들이 중심을 기준으로 양쪽으로 쌓인다
f + geom_dotplot(binaxis = "y", stackdir = "center",colour = factor(class))
{
a <- ggplot(economics, aes(date, unemploy))
c <- ggplot(mpg, aes(hwy))
c2 <- ggplot(mpg)
d <- ggplot(mpg, aes(fl))
e <- ggplot(mpg, aes(cty, hwy))
f <- ggplot(mpg, aes(class, hwy),color = factor(class))
g <- ggplot(diamonds, aes(cut, color))
i <- ggplot(economics, aes(date, unemploy))
}
# geom_dotplot
# y축을 기준으로 점을 쌓고, 점들이 중심을 기준으로 양쪽으로 쌓인다
f + geom_dotplot(binaxis = "y", stackdir = "center")
{
a <- ggplot(economics, aes(date, unemploy))
c <- ggplot(mpg, aes(hwy))
c2 <- ggplot(mpg)
d <- ggplot(mpg, aes(fl))
e <- ggplot(mpg, aes(cty, hwy))
f <- ggplot(mpg, aes(class, hwy),color = factor(class),fill = factor(class))
g <- ggplot(diamonds, aes(cut, color))
i <- ggplot(economics, aes(date, unemploy))
}
# geom_dotplot
# y축을 기준으로 점을 쌓고, 점들이 중심을 기준으로 양쪽으로 쌓인다
f + geom_dotplot(binaxis = "y", stackdir = "center")
{
a <- ggplot(economics, aes(date, unemploy))
c <- ggplot(mpg, aes(hwy))
c2 <- ggplot(mpg)
d <- ggplot(mpg, aes(fl))
e <- ggplot(mpg, aes(cty, hwy))
f <- ggplot(mpg, aes(class, hwy))
g <- ggplot(diamonds, aes(cut, color))
i <- ggplot(economics, aes(date, unemploy))
}
# geom_dotplot
# y축을 기준으로 점을 쌓고, 점들이 중심을 기준으로 양쪽으로 쌓인다
f + geom_dotplot(binaxis = "y", stackdir = "center")
{
a <- ggplot(economics, aes(date, unemploy))
c <- ggplot(mpg, aes(hwy))
c2 <- ggplot(mpg)
d <- ggplot(mpg, aes(fl))
e <- ggplot(mpg, aes(cty, hwy))
f <- ggplot(mpg, aes(class, hwy),fill = class)
g <- ggplot(diamonds, aes(cut, color))
i <- ggplot(economics, aes(date, unemploy))
}
# geom_dotplot
# y축을 기준으로 점을 쌓고, 점들이 중심을 기준으로 양쪽으로 쌓인다
f + geom_dotplot(binaxis = "y", stackdir = "center")
{
a <- ggplot(economics, aes(date, unemploy))
c <- ggplot(mpg, aes(hwy))
c2 <- ggplot(mpg)
d <- ggplot(mpg, aes(fl))
e <- ggplot(mpg, aes(cty, hwy))
f <- ggplot(mpg, aes(class, hwy,fill = class))
g <- ggplot(diamonds, aes(cut, color))
i <- ggplot(economics, aes(date, unemploy))
}
# geom_dotplot
# y축을 기준으로 점을 쌓고, 점들이 중심을 기준으로 양쪽으로 쌓인다
f + geom_dotplot(binaxis = "y", stackdir = "center")
# geom_violin
f + geom_violin(scale = "area")
# geom_violin
f + geom_violin(scale = "count")
# geom_violin
f + geom_violin(scale = "width")
# geom_violin
f + geom_violin(scale = "area")
# geom_violin
# area : 모든 바이올린의 면적을 동일하게 만든다
# count : 데이터의 수에 비례하여 너비를 조절한다
# width : 동일한 너비를 유지한다.
f + geom_violin(scale = "area") + geom_boxplot(width = 0.1, fill = "white")
# ==================================================
# geom_count
g + geom_count()
# geom_jitter
e + geom_jitter(height = 2, width = 2)
# geom_jitter
e + geom_jitter(height = 3, width = 2)
# geom_jitter
e + geom_jitter(height = 2, width = 2)
# geom_jitter
e + geom_jitter(height = 2, width = 3)
# geom_jitter
e + geom_jitter(height = 2, width = 3)
# geom_jitter
e + geom_jitter(height = 2, width = 2)
# geom_jitter
e + geom_jitter(height = 2, width = 3)
# geom_jitter
e + geom_jitter(height = 2, width = 5)
# geom_jitter
e + geom_jitter(height = 2, width = 8)
# geom_jitter
e + geom_jitter(height = 2, width = 10)
# geom_jitter
e + geom_jitter(height = 2, width = 2)
# ==================================================
# geom_area
i + geom_area()
# 필요한 패키지를 로드합니다.
library(ggplot2)
library(dplyr)
# 연도 변수를 추가합니다.
economics <- economics %>%
mutate(year = as.factor(format(date, "%Y")))
# 면적 그래프를 생성하고 연도별로 색상을 매핑합니다.
p <- ggplot(economics, aes(x = date, y = unemploy, fill = year)) +
geom_area() +
theme_minimal() +
labs(title = "Unemployment Over Time by Year",
x = "Date",
y = "Unemployment",
fill = "Year")
# 플롯 출력
print(p)
# geom_line
i + geom_line()
# geom_line
i + geom_path()
# geom_line
i + geom_path()
# geom_line
i + geom_path()
# geom_line
i + geom_line()
# ==================================================
# geom_path
# 데이터로 economics를 사용하고, economics의 date를 x축, unemploy를 y축으로 설정한다.
# path -> 경로를 그린다
# lineend = 'butt' : 선의 끝이 뭉툭하게 잘리게 처리(기본값)
# lineend = 'round' : 선의 끝이 둥글게 처리
# lineend = 'square' : 선의 끝이 직각으로 처리
# lab(title = '표의 이름',x = x축 이름, y = y축 이름)
a + geom_path(lineend = "round") # + labs(title = 'Unemploy of Date')
# geom_line
i + geom_line()
# geom_step
i + geom_step(direction = "hv")
# geom_step
i + geom_step(direction = "v")
# geom_step
i + geom_step(direction = "h")
# geom_step
i + geom_step(direction = "hv")
# geom_step
i + geom_step(direction = "mid")
# geom_step
i + geom_step(direction = "mid")
# geom_step
i + geom_step(direction = "hv")
# geom_step
i + geom_step(direction = "mid")
# geom_step
i + geom_step(direction = "hv")
cor(x,y)
cov(x,y)
print(a)
print(cov(df))
df <- data.frame(
x= c(-5,-4,-3,-2,-1,0,1,2,3,4,5),
y= c(5,4,3,2,1,0,1,2,3,4,5)
)
print(cov(df))
x<-c(-5,-4,-3,-2,-1,0,1,2,3,4,5)
y<-c(5,4,3,2,1,0,1,2,3,4,5)
plot(x,y,xlab='x값',ylab='y값')
x<-c(-5,-4,-3,-2,-1,0,1,2,3,4,5)
y<-c(5,4,3,2,1,0,1,2,3,4,5)
plot(x,y,xlab='x값',ylab='y값',type='l')
head(df)
# 데이터 불러오기
df <- read.csv('../도로통합.csv')
head(df)
